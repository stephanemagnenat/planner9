/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c AvahiServer -p avahi-server.h Server.introspect.xml org.freedesktop.Avahi.Server
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AVAHI_SERVER_H_1244384927
#define AVAHI_SERVER_H_1244384927

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "avahi-marshall.h"

/*
 * Proxy class for interface org.freedesktop.Avahi.Server
 */
class AvahiServer: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.Avahi.Server"; }

public:
    AvahiServer(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~AvahiServer();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QDBusObjectPath> AddressResolverNew(int interface, int protocol, const QString &address, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(address) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("AddressResolverNew"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> DomainBrowserNew(int interface, int protocol, const QString &domain, int btype, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(domain) << qVariantFromValue(btype) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("DomainBrowserNew"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> EntryGroupNew()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("EntryGroupNew"), argumentList);
    }

    inline QDBusPendingReply<uint> GetAPIVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAPIVersion"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAlternativeHostName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetAlternativeHostName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetAlternativeServiceName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetAlternativeServiceName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetDomainName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetDomainName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetHostName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetHostName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetHostNameFqdn()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetHostNameFqdn"), argumentList);
    }

    inline QDBusPendingReply<uint> GetLocalServiceCookie()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetLocalServiceCookie"), argumentList);
    }

    inline QDBusPendingReply<int> GetNetworkInterfaceIndexByName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("GetNetworkInterfaceIndexByName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetNetworkInterfaceNameByIndex(int index)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(index);
        return asyncCallWithArgumentList(QLatin1String("GetNetworkInterfaceNameByIndex"), argumentList);
    }

    inline QDBusPendingReply<int> GetState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetState"), argumentList);
    }

    inline QDBusPendingReply<QString> GetVersionString()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetVersionString"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> HostNameResolverNew(int interface, int protocol, const QString &name, int aprotocol, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(aprotocol) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("HostNameResolverNew"), argumentList);
    }

    inline QDBusPendingReply<bool> IsNSSSupportAvailable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("IsNSSSupportAvailable"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> RecordBrowserNew(int interface, int protocol, const QString &name, ushort clazz, ushort type, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(clazz) << qVariantFromValue(type) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("RecordBrowserNew"), argumentList);
    }

    inline QDBusPendingReply<int, int, int, QString, QString, uint> ResolveAddress(int interface, int protocol, const QString &address, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(address) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("ResolveAddress"), argumentList);
    }
    inline QDBusReply<int> ResolveAddress(int interface, int protocol, const QString &address, uint flags, int &protocol_, int &aprotocol, QString &address_, QString &name, uint &flags_)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(address) << qVariantFromValue(flags);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ResolveAddress"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 6) {
            protocol_ = qdbus_cast<int>(reply.arguments().at(1));
            aprotocol = qdbus_cast<int>(reply.arguments().at(2));
            address_ = qdbus_cast<QString>(reply.arguments().at(3));
            name = qdbus_cast<QString>(reply.arguments().at(4));
            flags_ = qdbus_cast<uint>(reply.arguments().at(5));
        }
        return reply;
    }

    inline QDBusPendingReply<int, int, QString, int, QString, uint> ResolveHostName(int interface, int protocol, const QString &name, int aprotocol, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(aprotocol) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("ResolveHostName"), argumentList);
    }
    inline QDBusReply<int> ResolveHostName(int interface, int protocol, const QString &name, int aprotocol, uint flags, int &protocol_, QString &name_, int &aprotocol_, QString &address, uint &flags_)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(aprotocol) << qVariantFromValue(flags);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ResolveHostName"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 6) {
            protocol_ = qdbus_cast<int>(reply.arguments().at(1));
            name_ = qdbus_cast<QString>(reply.arguments().at(2));
            aprotocol_ = qdbus_cast<int>(reply.arguments().at(3));
            address = qdbus_cast<QString>(reply.arguments().at(4));
            flags_ = qdbus_cast<uint>(reply.arguments().at(5));
        }
        return reply;
    }

    inline QDBusReply<int> ResolveService(int interface, int protocol, const QString &name, const QString &type, const QString &domain, int aprotocol, uint flags, int &protocol_, QString &name_, QString &type_, QString &domain_, QString &host, int &aprotocol_, QString &address, ushort &port, QList<QByteArray> &txt, uint &flags_)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(type) << qVariantFromValue(domain) << qVariantFromValue(aprotocol) << qVariantFromValue(flags);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("ResolveService"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 11) {
            protocol_ = qdbus_cast<int>(reply.arguments().at(1));
            name_ = qdbus_cast<QString>(reply.arguments().at(2));
            type_ = qdbus_cast<QString>(reply.arguments().at(3));
            domain_ = qdbus_cast<QString>(reply.arguments().at(4));
            host = qdbus_cast<QString>(reply.arguments().at(5));
            aprotocol_ = qdbus_cast<int>(reply.arguments().at(6));
            address = qdbus_cast<QString>(reply.arguments().at(7));
            port = qdbus_cast<ushort>(reply.arguments().at(8));
            txt = qdbus_cast<QList<QByteArray> >(reply.arguments().at(9));
            flags_ = qdbus_cast<uint>(reply.arguments().at(10));
        }
        return reply;
    }

    inline QDBusPendingReply<QDBusObjectPath> ServiceBrowserNew(int interface, int protocol, const QString &type, const QString &domain, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(type) << qVariantFromValue(domain) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("ServiceBrowserNew"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ServiceResolverNew(int interface, int protocol, const QString &name, const QString &type, const QString &domain, int aprotocol, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(name) << qVariantFromValue(type) << qVariantFromValue(domain) << qVariantFromValue(aprotocol) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("ServiceResolverNew"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> ServiceTypeBrowserNew(int interface, int protocol, const QString &domain, uint flags)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(interface) << qVariantFromValue(protocol) << qVariantFromValue(domain) << qVariantFromValue(flags);
        return asyncCallWithArgumentList(QLatin1String("ServiceTypeBrowserNew"), argumentList);
    }

    inline QDBusPendingReply<> SetHostName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("SetHostName"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void StateChanged(int state, const QString &error);
};

namespace org {
  namespace freedesktop {
    namespace Avahi {
      typedef ::AvahiServer Server;
    }
  }
}
#endif
